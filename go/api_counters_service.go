/*
 * Matterhorn API
 *
 * Draft spec for the Matterhorn POC
 *
 * API version: 0.1.0
 * Contact: ozinoveva@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"database/sql"
	"fmt"
	"log"
)

// CountersApiService is a service that implents the logic for the CountersApiServicer
// This service should implement the business logic for every endpoint for the CountersApi API.
// Include any external packages or services that will be required by this service.
type CountersApiService struct {
	db *sql.DB
}

// NewCountersApiService creates a default api service
func NewCountersApiService(db *sql.DB) CountersApiServicer {
	return &CountersApiService{
		db: db,
	}
}

// GetCounter - Get the current counter value and increment it
func (s *CountersApiService) GetCounter() (interface{}, error) {
	db := s.db

	// Query the database for the current counter value
	readRows, readErr := db.Query("SELECT Value from Counters WHERE ID='1';")
	if readErr != nil {
		log.Printf("Failed to query database: %v", readErr)
		return nil, readErr
	}
	defer readRows.Close()

	// Read value from row response
	var value int64
	readRows.Next()
	readRows.Scan(&value)

	// Query the database to update the counter value
	updateRows, updateErr := db.Query(fmt.Sprintf("UPDATE Counters SET Value='%d' WHERE ID='%d';", value+1, 1))
	if updateErr != nil {
		log.Printf("Failed to update counter value: %v", updateErr)
		return nil, updateErr
	}
	defer updateRows.Close()

	// Construct response data object
	var data Counter = Counter{
		ID:    1,
		Value: value,
	}

	return data, nil
}

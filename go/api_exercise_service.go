/*
 * Matterhorn API
 *
 * Draft spec for the Matterhorn POC
 *
 * API version: 0.1.0
 * Contact: ozinoveva@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"database/sql"
	"fmt"
	"log"
)

// ExerciseApiService is a service that implents the logic for the ExerciseApiServicer
// This service should implement the business logic for every endpoint for the ExerciseApi API.
// Include any external packages or services that will be required by this service.
type ExerciseApiService struct {
	db *sql.DB
}

// NewExerciseApiService creates a default api service
func NewExerciseApiService(db *sql.DB) ExerciseApiServicer {
	return &ExerciseApiService{
		db: db,
	}
}

// GetExerciseRecords - Get exercise records for a user and a given time range
func (s *ExerciseApiService) GetExerciseRecords(userId int64, startDateTime string, endDateTime string) (interface{}, error) {
	db := s.db

	// Query the database for matching exercise records
	query := fmt.Sprintf(
		"SELECT Calories, Label, Timestamp from ExerciseRecords WHERE UserID=%d AND Timestamp BETWEEN '%s' AND '%s';",
		userId, startDateTime, endDateTime)
	readRows, readErr := db.Query(query)
	if readErr != nil {
		log.Printf("Failed to query database: %v", readErr)
		return nil, readErr
	}
	defer readRows.Close()

	records := []ExerciseRecord{}
	for readRows.Next() {
		var calories int32
		var label string
		var timestamp string
		readErr = readRows.Scan(&calories, &label, &timestamp)
		if readErr != nil {
			log.Printf("Failed to read row returned from query: %v", readErr)
			return nil, readErr
		}

		records = append(records, ExerciseRecord{
			Calories:  calories,
			Label:     label,
			Timestamp: timestamp,
		})
	}

	log.Printf("Returning %d records", len(records))
	return records, nil
}

// PostExerciseRecord - Add a new exercise record
func (s *ExerciseApiService) PostExerciseRecord(userId int64, exerciseRecord ExerciseRecord) (interface{}, error) {
	db := s.db

	// Query the database for matching exercise records
	query := fmt.Sprintf(
		"INSERT INTO ExerciseRecords (UserID, Calories, Label, Timestamp) VALUES (%d, %d, '%s', '%s');",
		userId, exerciseRecord.Calories, exerciseRecord.Label, exerciseRecord.Timestamp)
	_, readErr := db.Exec(query)
	if readErr != nil {
		log.Printf("Failed to query database: %v", readErr)
		return nil, readErr
	}

	return exerciseRecord, nil
}

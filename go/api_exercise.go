/*
 * Matterhorn API
 *
 * Draft spec for the Matterhorn POC
 *
 * API version: 0.1.0
 * Contact: ozinoveva@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A ExerciseApiController binds http requests to an api service and writes the service results to the http response
type ExerciseApiController struct {
	service ExerciseApiServicer
}

// NewExerciseApiController creates a default api controller
func NewExerciseApiController(s ExerciseApiServicer) Router {
	return &ExerciseApiController{service: s}
}

// Routes returns all of the api route for the ExerciseApiController
func (c *ExerciseApiController) Routes() Routes {
	return Routes{
		{
			"GetExerciseRecords",
			strings.ToUpper("Get"),
			"/user/{userId}/exercise",
			c.GetExerciseRecords,
		},
		{
			"PostExerciseRecord",
			strings.ToUpper("Post"),
			"/user/{userId}/exercise",
			c.PostExerciseRecord,
		},
	}
}

// GetExerciseRecords - Get exercise records for a user and a given time range
func (c *ExerciseApiController) GetExerciseRecords(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userId, err := parseIntParameter(params["userId"])
	if err != nil {
		w.WriteHeader(400)
		return
	}

	startDateTime := query.Get("startDateTime")
	endDateTime := query.Get("endDateTime")
	result, status, err := c.service.GetExerciseRecords(userId, startDateTime, endDateTime)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, status, w)
}

// PostExerciseRecord - Add a new exercise record
func (c *ExerciseApiController) PostExerciseRecord(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userId, err := parseIntParameter(params["userId"])
	if err != nil {
		// Bad Request
		w.WriteHeader(400)
		return
	}

	exerciseRecord := &ExerciseRecord{}
	if err := json.NewDecoder(r.Body).Decode(&exerciseRecord); err != nil {
		w.WriteHeader(500)
		return
	}

	result, status, err := c.service.PostExerciseRecord(userId, *exerciseRecord)
	if err != nil {
		w.WriteHeader(500)
		return
	}

	EncodeJSONResponse(result, status, w)
}

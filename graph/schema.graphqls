type User {
    id: ID!
    displayName: String
    age: Int
    height: Int
    sex: Sex
    weight: Int
    calorieGoal: Int
    exerciseRecords(startTime: String, endTime: String): [ExerciseRecord!]!
    foodRecords(startTime: String, endTime: String): [FoodRecord!]!
}

type CalorieGoal {
  calories: Int!
}

type ExerciseRecord {
    user: User!
    calories: Int!
    label: String!
    timestamp: String!
}

type FoodRecord {
    user: User!
    calories: Int!
    label: String!
    timestamp: String!
}

enum Sex {
    FEMALE
    MALE
}

type Query {
  me: User
  user(id: ID!): User
}

input CalorieGoalInput {
  calories: Int!
}

input NewExerciseRecord {
  label: String
  calories: Int
}

input NewFoodRecord {
  label: String
  calories: Int
}

input NewUser {
  id: ID!
}

type Mutation {
  createMe: User!
  createUser(input: NewUser!): User!
  createExerciseRecord(input: NewExerciseRecord!): ExerciseRecord!
  createFoodRecord(input: NewFoodRecord!): FoodRecord!
  setCalorieGoal(input: CalorieGoalInput!): CalorieGoal!
  deleteUser(id: ID!): Boolean
}